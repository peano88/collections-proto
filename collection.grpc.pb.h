// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: collection.proto
#ifndef GRPC_collection_2eproto__INCLUDED
#define GRPC_collection_2eproto__INCLUDED

#include "collection.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace collection {

// Generated according to https://cloud.google.com/apis/design/standard_methods
class CollectionService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.collection.CollectionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::proto::collection::ListCollectionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>> AsyncListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>>(AsyncListCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>> PrepareAsyncListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>>(PrepareAsyncListCollectionsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::proto::collection::Collection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> AsyncGetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(AsyncGetCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> PrepareAsyncGetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(PrepareAsyncGetCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::proto::collection::Collection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> AsyncCreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::proto::collection::Collection* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> AsyncUpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(AsyncUpdateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>> PrepareAsyncUpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>>(PrepareAsyncUpdateCollectionRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteCollectionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>* AsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::ListCollectionsResponse>* PrepareAsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* AsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* PrepareAsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* AsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::collection::Collection>* PrepareAsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::proto::collection::ListCollectionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>> AsyncListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>>(AsyncListCollectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>> PrepareAsyncListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>>(PrepareAsyncListCollectionsRaw(context, request, cq));
    }
    ::grpc::Status GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::proto::collection::Collection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> AsyncGetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(AsyncGetCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> PrepareAsyncGetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(PrepareAsyncGetCollectionRaw(context, request, cq));
    }
    ::grpc::Status CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::proto::collection::Collection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> AsyncCreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(AsyncCreateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> PrepareAsyncCreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(PrepareAsyncCreateCollectionRaw(context, request, cq));
    }
    ::grpc::Status UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::proto::collection::Collection* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> AsyncUpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(AsyncUpdateCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>> PrepareAsyncUpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>>(PrepareAsyncUpdateCollectionRaw(context, request, cq));
    }
    ::grpc::Status DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteCollectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteCollectionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>* AsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>* PrepareAsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* AsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* PrepareAsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* AsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* PrepareAsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListCollections_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCollection_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCollection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListCollections(::grpc::ServerContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response);
    virtual ::grpc::Status GetCollection(::grpc::ServerContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response);
    virtual ::grpc::Status CreateCollection(::grpc::ServerContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response);
    virtual ::grpc::Status UpdateCollection(::grpc::ServerContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response);
    virtual ::grpc::Status DeleteCollection(::grpc::ServerContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListCollections() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollections(::grpc::ServerContext* context, ::proto::collection::ListCollectionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::collection::ListCollectionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCollection() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollection(::grpc::ServerContext* context, ::proto::collection::GetCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::collection::Collection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCollection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::proto::collection::CreateCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::collection::Collection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCollection() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCollection(::grpc::ServerContext* context, ::proto::collection::UpdateCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::collection::Collection>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollection(::grpc::ServerContext* context, ::proto::collection::DeleteCollectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListCollections<WithAsyncMethod_GetCollection<WithAsyncMethod_CreateCollection<WithAsyncMethod_UpdateCollection<WithAsyncMethod_DeleteCollection<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::ListCollectionsRequest, ::proto::collection::ListCollectionsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response) { return this->ListCollections(context, request, response); }));}
    void SetMessageAllocatorFor_ListCollections(
        ::grpc::experimental::MessageAllocator< ::proto::collection::ListCollectionsRequest, ::proto::collection::ListCollectionsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::ListCollectionsRequest, ::proto::collection::ListCollectionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::GetCollectionRequest, ::proto::collection::Collection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response) { return this->GetCollection(context, request, response); }));}
    void SetMessageAllocatorFor_GetCollection(
        ::grpc::experimental::MessageAllocator< ::proto::collection::GetCollectionRequest, ::proto::collection::Collection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::GetCollectionRequest, ::proto::collection::Collection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::CreateCollectionRequest, ::proto::collection::Collection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response) { return this->CreateCollection(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCollection(
        ::grpc::experimental::MessageAllocator< ::proto::collection::CreateCollectionRequest, ::proto::collection::Collection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::CreateCollectionRequest, ::proto::collection::Collection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::UpdateCollectionRequest, ::proto::collection::Collection>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response) { return this->UpdateCollection(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCollection(
        ::grpc::experimental::MessageAllocator< ::proto::collection::UpdateCollectionRequest, ::proto::collection::Collection>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::UpdateCollectionRequest, ::proto::collection::Collection>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::DeleteCollectionRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response) { return this->DeleteCollection(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCollection(
        ::grpc::experimental::MessageAllocator< ::proto::collection::DeleteCollectionRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::collection::DeleteCollectionRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListCollections<ExperimentalWithCallbackMethod_GetCollection<ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_UpdateCollection<ExperimentalWithCallbackMethod_DeleteCollection<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListCollections<ExperimentalWithCallbackMethod_GetCollection<ExperimentalWithCallbackMethod_CreateCollection<ExperimentalWithCallbackMethod_UpdateCollection<ExperimentalWithCallbackMethod_DeleteCollection<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListCollections() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCollection() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCollection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCollection() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListCollections() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListCollections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCollection() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCollection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCollection() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCollection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListCollections() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListCollections(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListCollections(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListCollections(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteCollection() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCollection(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCollection(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCollection(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListCollections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListCollections() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::collection::ListCollectionsRequest, ::proto::collection::ListCollectionsResponse>(std::bind(&WithStreamedUnaryMethod_ListCollections<BaseClass>::StreamedListCollections, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListCollections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListCollections(::grpc::ServerContext* /*context*/, const ::proto::collection::ListCollectionsRequest* /*request*/, ::proto::collection::ListCollectionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListCollections(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::collection::ListCollectionsRequest,::proto::collection::ListCollectionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCollection() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::collection::GetCollectionRequest, ::proto::collection::Collection>(std::bind(&WithStreamedUnaryMethod_GetCollection<BaseClass>::StreamedGetCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::GetCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::collection::GetCollectionRequest,::proto::collection::Collection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCollection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::collection::CreateCollectionRequest, ::proto::collection::Collection>(std::bind(&WithStreamedUnaryMethod_CreateCollection<BaseClass>::StreamedCreateCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::CreateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::collection::CreateCollectionRequest,::proto::collection::Collection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCollection() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::collection::UpdateCollectionRequest, ::proto::collection::Collection>(std::bind(&WithStreamedUnaryMethod_UpdateCollection<BaseClass>::StreamedUpdateCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::UpdateCollectionRequest* /*request*/, ::proto::collection::Collection* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::collection::UpdateCollectionRequest,::proto::collection::Collection>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCollection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCollection() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::collection::DeleteCollectionRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteCollection<BaseClass>::StreamedDeleteCollection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteCollection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCollection(::grpc::ServerContext* /*context*/, const ::proto::collection::DeleteCollectionRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCollection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::collection::DeleteCollectionRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListCollections<WithStreamedUnaryMethod_GetCollection<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_UpdateCollection<WithStreamedUnaryMethod_DeleteCollection<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListCollections<WithStreamedUnaryMethod_GetCollection<WithStreamedUnaryMethod_CreateCollection<WithStreamedUnaryMethod_UpdateCollection<WithStreamedUnaryMethod_DeleteCollection<Service > > > > > StreamedService;
};

}  // namespace collection
}  // namespace proto


#endif  // GRPC_collection_2eproto__INCLUDED
