// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: item.proto
#ifndef GRPC_item_2eproto__INCLUDED
#define GRPC_item_2eproto__INCLUDED

#include "item.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace item {

// Generated according to https://cloud.google.com/apis/design/standard_methods
class ItemService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.item.ItemService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::proto::item::Item* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>> AsyncCreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>>(AsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>> PrepareAsyncCreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>>(PrepareAsyncCreateItemRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::proto::item::Item* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>> AsyncUpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>* AsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>* PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::item::Item>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::proto::item::Item* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>> AsyncCreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>>(AsyncCreateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>> PrepareAsyncCreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>>(PrepareAsyncCreateItemRaw(context, request, cq));
    }
    ::grpc::Status UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::proto::item::Item* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>> AsyncUpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>>(AsyncUpdateItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>> PrepareAsyncUpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::item::Item>>(PrepareAsyncUpdateItemRaw(context, request, cq));
    }
    ::grpc::Status DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteItemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteItemRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) override;
      void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) override;
      void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::item::Item>* AsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::item::Item>* PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::item::Item>* AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::item::Item>* PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateItem_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateItem_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteItem_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateItem(::grpc::ServerContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response);
    virtual ::grpc::Status UpdateItem(::grpc::ServerContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response);
    virtual ::grpc::Status DeleteItem(::grpc::ServerContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateItem() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateItem(::grpc::ServerContext* context, ::proto::item::CreateItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::item::Item>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateItem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItem(::grpc::ServerContext* context, ::proto::item::UpdateItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::item::Item>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteItem() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::proto::item::DeleteItemRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateItem<WithAsyncMethod_UpdateItem<WithAsyncMethod_DeleteItem<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::CreateItemRequest, ::proto::item::Item>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response) { return this->CreateItem(context, request, response); }));}
    void SetMessageAllocatorFor_CreateItem(
        ::grpc::experimental::MessageAllocator< ::proto::item::CreateItemRequest, ::proto::item::Item>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::CreateItemRequest, ::proto::item::Item>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::UpdateItemRequest, ::proto::item::Item>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response) { return this->UpdateItem(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateItem(
        ::grpc::experimental::MessageAllocator< ::proto::item::UpdateItemRequest, ::proto::item::Item>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::UpdateItemRequest, ::proto::item::Item>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::DeleteItemRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response) { return this->DeleteItem(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteItem(
        ::grpc::experimental::MessageAllocator< ::proto::item::DeleteItemRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::item::DeleteItemRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateItem<ExperimentalWithCallbackMethod_UpdateItem<ExperimentalWithCallbackMethod_DeleteItem<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateItem<ExperimentalWithCallbackMethod_UpdateItem<ExperimentalWithCallbackMethod_DeleteItem<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateItem() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateItem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteItem() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateItem() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateItem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteItem() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteItem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteItem() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteItem(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteItem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteItem(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateItem() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::item::CreateItemRequest, ::proto::item::Item>(std::bind(&WithStreamedUnaryMethod_CreateItem<BaseClass>::StreamedCreateItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateItem(::grpc::ServerContext* /*context*/, const ::proto::item::CreateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::item::CreateItemRequest,::proto::item::Item>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateItem() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::item::UpdateItemRequest, ::proto::item::Item>(std::bind(&WithStreamedUnaryMethod_UpdateItem<BaseClass>::StreamedUpdateItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateItem(::grpc::ServerContext* /*context*/, const ::proto::item::UpdateItemRequest* /*request*/, ::proto::item::Item* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::item::UpdateItemRequest,::proto::item::Item>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteItem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteItem() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::proto::item::DeleteItemRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteItem<BaseClass>::StreamedDeleteItem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteItem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteItem(::grpc::ServerContext* /*context*/, const ::proto::item::DeleteItemRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteItem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::item::DeleteItemRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateItem<WithStreamedUnaryMethod_UpdateItem<WithStreamedUnaryMethod_DeleteItem<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateItem<WithStreamedUnaryMethod_UpdateItem<WithStreamedUnaryMethod_DeleteItem<Service > > > StreamedService;
};

}  // namespace item
}  // namespace proto


#endif  // GRPC_item_2eproto__INCLUDED
