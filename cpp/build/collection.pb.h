// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include "item.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collection_2eproto;
namespace proto {
namespace collection {
class Collection;
class CollectionDefaultTypeInternal;
extern CollectionDefaultTypeInternal _Collection_default_instance_;
class CreateCollectionRequest;
class CreateCollectionRequestDefaultTypeInternal;
extern CreateCollectionRequestDefaultTypeInternal _CreateCollectionRequest_default_instance_;
class DeleteCollectionRequest;
class DeleteCollectionRequestDefaultTypeInternal;
extern DeleteCollectionRequestDefaultTypeInternal _DeleteCollectionRequest_default_instance_;
class GetCollectionRequest;
class GetCollectionRequestDefaultTypeInternal;
extern GetCollectionRequestDefaultTypeInternal _GetCollectionRequest_default_instance_;
class ListCollectionsRequest;
class ListCollectionsRequestDefaultTypeInternal;
extern ListCollectionsRequestDefaultTypeInternal _ListCollectionsRequest_default_instance_;
class ListCollectionsResponse;
class ListCollectionsResponseDefaultTypeInternal;
extern ListCollectionsResponseDefaultTypeInternal _ListCollectionsResponse_default_instance_;
class UpdateCollectionRequest;
class UpdateCollectionRequestDefaultTypeInternal;
extern UpdateCollectionRequestDefaultTypeInternal _UpdateCollectionRequest_default_instance_;
}  // namespace collection
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::collection::Collection* Arena::CreateMaybeMessage<::proto::collection::Collection>(Arena*);
template<> ::proto::collection::CreateCollectionRequest* Arena::CreateMaybeMessage<::proto::collection::CreateCollectionRequest>(Arena*);
template<> ::proto::collection::DeleteCollectionRequest* Arena::CreateMaybeMessage<::proto::collection::DeleteCollectionRequest>(Arena*);
template<> ::proto::collection::GetCollectionRequest* Arena::CreateMaybeMessage<::proto::collection::GetCollectionRequest>(Arena*);
template<> ::proto::collection::ListCollectionsRequest* Arena::CreateMaybeMessage<::proto::collection::ListCollectionsRequest>(Arena*);
template<> ::proto::collection::ListCollectionsResponse* Arena::CreateMaybeMessage<::proto::collection::ListCollectionsResponse>(Arena*);
template<> ::proto::collection::UpdateCollectionRequest* Arena::CreateMaybeMessage<::proto::collection::UpdateCollectionRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace collection {

// ===================================================================

class Collection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.Collection) */ {
 public:
  Collection();
  virtual ~Collection();

  Collection(const Collection& from);
  Collection(Collection&& from) noexcept
    : Collection() {
    *this = ::std::move(from);
  }

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collection& operator=(Collection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collection* internal_default_instance() {
    return reinterpret_cast<const Collection*>(
               &_Collection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Collection& a, Collection& b) {
    a.Swap(&b);
  }
  inline void Swap(Collection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collection* New() const final {
    return CreateMaybeMessage<Collection>(nullptr);
  }

  Collection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collection& from);
  void MergeFrom(const Collection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.Collection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kNameFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kUpdatedAtFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .proto.item.Item items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::proto::item::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::item::Item >*
      mutable_items();
  private:
  const ::proto::item::Item& _internal_items(int index) const;
  ::proto::item::Item* _internal_add_items();
  public:
  const ::proto::item::Item& items(int index) const;
  ::proto::item::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::item::Item >&
      items() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp createdAt = 4;
  bool has_createdat() const;
  private:
  bool _internal_has_createdat() const;
  public:
  void clear_createdat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_createdat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createdat();
  void set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createdat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createdat();
  public:

  // .google.protobuf.Timestamp updatedAt = 5;
  bool has_updatedat() const;
  private:
  bool _internal_has_updatedat() const;
  public:
  void clear_updatedat();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updatedat();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updatedat();
  void set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updatedat() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updatedat();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.Collection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::item::Item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* createdat_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updatedat_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class ListCollectionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.ListCollectionsRequest) */ {
 public:
  ListCollectionsRequest();
  virtual ~ListCollectionsRequest();

  ListCollectionsRequest(const ListCollectionsRequest& from);
  ListCollectionsRequest(ListCollectionsRequest&& from) noexcept
    : ListCollectionsRequest() {
    *this = ::std::move(from);
  }

  inline ListCollectionsRequest& operator=(const ListCollectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectionsRequest& operator=(ListCollectionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollectionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCollectionsRequest*>(
               &_ListCollectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListCollectionsRequest& a, ListCollectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollectionsRequest* New() const final {
    return CreateMaybeMessage<ListCollectionsRequest>(nullptr);
  }

  ListCollectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollectionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollectionsRequest& from);
  void MergeFrom(const ListCollectionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.ListCollectionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.ListCollectionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class ListCollectionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.ListCollectionsResponse) */ {
 public:
  ListCollectionsResponse();
  virtual ~ListCollectionsResponse();

  ListCollectionsResponse(const ListCollectionsResponse& from);
  ListCollectionsResponse(ListCollectionsResponse&& from) noexcept
    : ListCollectionsResponse() {
    *this = ::std::move(from);
  }

  inline ListCollectionsResponse& operator=(const ListCollectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCollectionsResponse& operator=(ListCollectionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCollectionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCollectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCollectionsResponse*>(
               &_ListCollectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListCollectionsResponse& a, ListCollectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCollectionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCollectionsResponse* New() const final {
    return CreateMaybeMessage<ListCollectionsResponse>(nullptr);
  }

  ListCollectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCollectionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCollectionsResponse& from);
  void MergeFrom(const ListCollectionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCollectionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.ListCollectionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .proto.collection.Collection collections = 1;
  int collections_size() const;
  private:
  int _internal_collections_size() const;
  public:
  void clear_collections();
  ::proto::collection::Collection* mutable_collections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::collection::Collection >*
      mutable_collections();
  private:
  const ::proto::collection::Collection& _internal_collections(int index) const;
  ::proto::collection::Collection* _internal_add_collections();
  public:
  const ::proto::collection::Collection& collections(int index) const;
  ::proto::collection::Collection* add_collections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::collection::Collection >&
      collections() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.ListCollectionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::collection::Collection > collections_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class GetCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.GetCollectionRequest) */ {
 public:
  GetCollectionRequest();
  virtual ~GetCollectionRequest();

  GetCollectionRequest(const GetCollectionRequest& from);
  GetCollectionRequest(GetCollectionRequest&& from) noexcept
    : GetCollectionRequest() {
    *this = ::std::move(from);
  }

  inline GetCollectionRequest& operator=(const GetCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollectionRequest& operator=(GetCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const GetCollectionRequest*>(
               &_GetCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetCollectionRequest& a, GetCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCollectionRequest* New() const final {
    return CreateMaybeMessage<GetCollectionRequest>(nullptr);
  }

  GetCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollectionRequest& from);
  void MergeFrom(const GetCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.GetCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.GetCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class CreateCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.CreateCollectionRequest) */ {
 public:
  CreateCollectionRequest();
  virtual ~CreateCollectionRequest();

  CreateCollectionRequest(const CreateCollectionRequest& from);
  CreateCollectionRequest(CreateCollectionRequest&& from) noexcept
    : CreateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline CreateCollectionRequest& operator=(const CreateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCollectionRequest& operator=(CreateCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCollectionRequest*>(
               &_CreateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateCollectionRequest& a, CreateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCollectionRequest* New() const final {
    return CreateMaybeMessage<CreateCollectionRequest>(nullptr);
  }

  CreateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCollectionRequest& from);
  void MergeFrom(const CreateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.CreateCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 3,
  };
  // .proto.collection.Collection collection = 3;
  bool has_collection() const;
  private:
  bool _internal_has_collection() const;
  public:
  void clear_collection();
  const ::proto::collection::Collection& collection() const;
  ::proto::collection::Collection* release_collection();
  ::proto::collection::Collection* mutable_collection();
  void set_allocated_collection(::proto::collection::Collection* collection);
  private:
  const ::proto::collection::Collection& _internal_collection() const;
  ::proto::collection::Collection* _internal_mutable_collection();
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.CreateCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::collection::Collection* collection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class UpdateCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.UpdateCollectionRequest) */ {
 public:
  UpdateCollectionRequest();
  virtual ~UpdateCollectionRequest();

  UpdateCollectionRequest(const UpdateCollectionRequest& from);
  UpdateCollectionRequest(UpdateCollectionRequest&& from) noexcept
    : UpdateCollectionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCollectionRequest& operator=(const UpdateCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCollectionRequest& operator=(UpdateCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCollectionRequest*>(
               &_UpdateCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateCollectionRequest& a, UpdateCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCollectionRequest* New() const final {
    return CreateMaybeMessage<UpdateCollectionRequest>(nullptr);
  }

  UpdateCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCollectionRequest& from);
  void MergeFrom(const UpdateCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.UpdateCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionFieldNumber = 1,
    kFieldMaskFieldNumber = 2,
  };
  // .proto.collection.Collection collection = 1;
  bool has_collection() const;
  private:
  bool _internal_has_collection() const;
  public:
  void clear_collection();
  const ::proto::collection::Collection& collection() const;
  ::proto::collection::Collection* release_collection();
  ::proto::collection::Collection* mutable_collection();
  void set_allocated_collection(::proto::collection::Collection* collection);
  private:
  const ::proto::collection::Collection& _internal_collection() const;
  ::proto::collection::Collection* _internal_mutable_collection();
  public:

  // .google.protobuf.FieldMask fieldMask = 2;
  bool has_fieldmask() const;
  private:
  bool _internal_has_fieldmask() const;
  public:
  void clear_fieldmask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& fieldmask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_fieldmask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_fieldmask();
  void set_allocated_fieldmask(PROTOBUF_NAMESPACE_ID::FieldMask* fieldmask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_fieldmask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_fieldmask();
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.UpdateCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::collection::Collection* collection_;
  PROTOBUF_NAMESPACE_ID::FieldMask* fieldmask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// -------------------------------------------------------------------

class DeleteCollectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.collection.DeleteCollectionRequest) */ {
 public:
  DeleteCollectionRequest();
  virtual ~DeleteCollectionRequest();

  DeleteCollectionRequest(const DeleteCollectionRequest& from);
  DeleteCollectionRequest(DeleteCollectionRequest&& from) noexcept
    : DeleteCollectionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCollectionRequest& operator=(const DeleteCollectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCollectionRequest& operator=(DeleteCollectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCollectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteCollectionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCollectionRequest*>(
               &_DeleteCollectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteCollectionRequest& a, DeleteCollectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCollectionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCollectionRequest* New() const final {
    return CreateMaybeMessage<DeleteCollectionRequest>(nullptr);
  }

  DeleteCollectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCollectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCollectionRequest& from);
  void MergeFrom(const DeleteCollectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCollectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.collection.DeleteCollectionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collection_2eproto);
    return ::descriptor_table_collection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.collection.DeleteCollectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Collection

// int64 id = 1;
inline void Collection::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Collection::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Collection::id() const {
  // @@protoc_insertion_point(field_get:proto.collection.Collection.id)
  return _internal_id();
}
inline void Collection::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Collection::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.collection.Collection.id)
}

// string name = 2;
inline void Collection::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collection::name() const {
  // @@protoc_insertion_point(field_get:proto.collection.Collection.name)
  return _internal_name();
}
inline void Collection::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.collection.Collection.name)
}
inline std::string* Collection::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.collection.Collection.name)
  return _internal_mutable_name();
}
inline const std::string& Collection::_internal_name() const {
  return name_.GetNoArena();
}
inline void Collection::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collection::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.collection.Collection.name)
}
inline void Collection::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.collection.Collection.name)
}
inline void Collection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.collection.Collection.name)
}
inline std::string* Collection::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collection::release_name() {
  // @@protoc_insertion_point(field_release:proto.collection.Collection.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.collection.Collection.name)
}

// repeated .proto.item.Item items = 3;
inline int Collection::_internal_items_size() const {
  return items_.size();
}
inline int Collection::items_size() const {
  return _internal_items_size();
}
inline ::proto::item::Item* Collection::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.collection.Collection.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::item::Item >*
Collection::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.collection.Collection.items)
  return &items_;
}
inline const ::proto::item::Item& Collection::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::proto::item::Item& Collection::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.collection.Collection.items)
  return _internal_items(index);
}
inline ::proto::item::Item* Collection::_internal_add_items() {
  return items_.Add();
}
inline ::proto::item::Item* Collection::add_items() {
  // @@protoc_insertion_point(field_add:proto.collection.Collection.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::item::Item >&
Collection::items() const {
  // @@protoc_insertion_point(field_list:proto.collection.Collection.items)
  return items_;
}

// .google.protobuf.Timestamp createdAt = 4;
inline bool Collection::_internal_has_createdat() const {
  return this != internal_default_instance() && createdat_ != nullptr;
}
inline bool Collection::has_createdat() const {
  return _internal_has_createdat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collection::_internal_createdat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = createdat_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collection::createdat() const {
  // @@protoc_insertion_point(field_get:proto.collection.Collection.createdAt)
  return _internal_createdat();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::release_createdat() {
  // @@protoc_insertion_point(field_release:proto.collection.Collection.createdAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdat_;
  createdat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::_internal_mutable_createdat() {
  
  if (createdat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    createdat_ = p;
  }
  return createdat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:proto.collection.Collection.createdAt)
  return _internal_mutable_createdat();
}
inline void Collection::set_allocated_createdat(PROTOBUF_NAMESPACE_ID::Timestamp* createdat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat_);
  }
  if (createdat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdat)->GetArena();
    if (message_arena != submessage_arena) {
      createdat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdat, submessage_arena);
    }
    
  } else {
    
  }
  createdat_ = createdat;
  // @@protoc_insertion_point(field_set_allocated:proto.collection.Collection.createdAt)
}

// .google.protobuf.Timestamp updatedAt = 5;
inline bool Collection::_internal_has_updatedat() const {
  return this != internal_default_instance() && updatedat_ != nullptr;
}
inline bool Collection::has_updatedat() const {
  return _internal_has_updatedat();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collection::_internal_updatedat() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updatedat_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Collection::updatedat() const {
  // @@protoc_insertion_point(field_get:proto.collection.Collection.updatedAt)
  return _internal_updatedat();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::release_updatedat() {
  // @@protoc_insertion_point(field_release:proto.collection.Collection.updatedAt)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updatedat_;
  updatedat_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::_internal_mutable_updatedat() {
  
  if (updatedat_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    updatedat_ = p;
  }
  return updatedat_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Collection::mutable_updatedat() {
  // @@protoc_insertion_point(field_mutable:proto.collection.Collection.updatedAt)
  return _internal_mutable_updatedat();
}
inline void Collection::set_allocated_updatedat(PROTOBUF_NAMESPACE_ID::Timestamp* updatedat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat_);
  }
  if (updatedat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatedat)->GetArena();
    if (message_arena != submessage_arena) {
      updatedat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedat, submessage_arena);
    }
    
  } else {
    
  }
  updatedat_ = updatedat;
  // @@protoc_insertion_point(field_set_allocated:proto.collection.Collection.updatedAt)
}

// -------------------------------------------------------------------

// ListCollectionsRequest

// string parent = 1;
inline void ListCollectionsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsRequest::parent() const {
  // @@protoc_insertion_point(field_get:proto.collection.ListCollectionsRequest.parent)
  return _internal_parent();
}
inline void ListCollectionsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:proto.collection.ListCollectionsRequest.parent)
}
inline std::string* ListCollectionsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:proto.collection.ListCollectionsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListCollectionsRequest::_internal_parent() const {
  return parent_.GetNoArena();
}
inline void ListCollectionsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsRequest::set_parent(std::string&& value) {
  
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.collection.ListCollectionsRequest.parent)
}
inline void ListCollectionsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.collection.ListCollectionsRequest.parent)
}
inline void ListCollectionsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.collection.ListCollectionsRequest.parent)
}
inline std::string* ListCollectionsRequest::_internal_mutable_parent() {
  
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:proto.collection.ListCollectionsRequest.parent)
  
  return parent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:proto.collection.ListCollectionsRequest.parent)
}

// int32 page_size = 2;
inline void ListCollectionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCollectionsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListCollectionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:proto.collection.ListCollectionsRequest.page_size)
  return _internal_page_size();
}
inline void ListCollectionsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListCollectionsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:proto.collection.ListCollectionsRequest.page_size)
}

// string page_token = 3;
inline void ListCollectionsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:proto.collection.ListCollectionsRequest.page_token)
  return _internal_page_token();
}
inline void ListCollectionsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:proto.collection.ListCollectionsRequest.page_token)
}
inline std::string* ListCollectionsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:proto.collection.ListCollectionsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListCollectionsRequest::_internal_page_token() const {
  return page_token_.GetNoArena();
}
inline void ListCollectionsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsRequest::set_page_token(std::string&& value) {
  
  page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.collection.ListCollectionsRequest.page_token)
}
inline void ListCollectionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.collection.ListCollectionsRequest.page_token)
}
inline void ListCollectionsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.collection.ListCollectionsRequest.page_token)
}
inline std::string* ListCollectionsRequest::_internal_mutable_page_token() {
  
  return page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:proto.collection.ListCollectionsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:proto.collection.ListCollectionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListCollectionsResponse

// repeated .proto.collection.Collection collections = 1;
inline int ListCollectionsResponse::_internal_collections_size() const {
  return collections_.size();
}
inline int ListCollectionsResponse::collections_size() const {
  return _internal_collections_size();
}
inline void ListCollectionsResponse::clear_collections() {
  collections_.Clear();
}
inline ::proto::collection::Collection* ListCollectionsResponse::mutable_collections(int index) {
  // @@protoc_insertion_point(field_mutable:proto.collection.ListCollectionsResponse.collections)
  return collections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::collection::Collection >*
ListCollectionsResponse::mutable_collections() {
  // @@protoc_insertion_point(field_mutable_list:proto.collection.ListCollectionsResponse.collections)
  return &collections_;
}
inline const ::proto::collection::Collection& ListCollectionsResponse::_internal_collections(int index) const {
  return collections_.Get(index);
}
inline const ::proto::collection::Collection& ListCollectionsResponse::collections(int index) const {
  // @@protoc_insertion_point(field_get:proto.collection.ListCollectionsResponse.collections)
  return _internal_collections(index);
}
inline ::proto::collection::Collection* ListCollectionsResponse::_internal_add_collections() {
  return collections_.Add();
}
inline ::proto::collection::Collection* ListCollectionsResponse::add_collections() {
  // @@protoc_insertion_point(field_add:proto.collection.ListCollectionsResponse.collections)
  return _internal_add_collections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::collection::Collection >&
ListCollectionsResponse::collections() const {
  // @@protoc_insertion_point(field_list:proto.collection.ListCollectionsResponse.collections)
  return collections_;
}

// string next_page_token = 2;
inline void ListCollectionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListCollectionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:proto.collection.ListCollectionsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListCollectionsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:proto.collection.ListCollectionsResponse.next_page_token)
}
inline std::string* ListCollectionsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:proto.collection.ListCollectionsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListCollectionsResponse::_internal_next_page_token() const {
  return next_page_token_.GetNoArena();
}
inline void ListCollectionsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListCollectionsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.collection.ListCollectionsResponse.next_page_token)
}
inline void ListCollectionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.collection.ListCollectionsResponse.next_page_token)
}
inline void ListCollectionsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.collection.ListCollectionsResponse.next_page_token)
}
inline std::string* ListCollectionsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListCollectionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:proto.collection.ListCollectionsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListCollectionsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:proto.collection.ListCollectionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetCollectionRequest

// int64 id = 1;
inline void GetCollectionRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCollectionRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetCollectionRequest::id() const {
  // @@protoc_insertion_point(field_get:proto.collection.GetCollectionRequest.id)
  return _internal_id();
}
inline void GetCollectionRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void GetCollectionRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.collection.GetCollectionRequest.id)
}

// -------------------------------------------------------------------

// CreateCollectionRequest

// .proto.collection.Collection collection = 3;
inline bool CreateCollectionRequest::_internal_has_collection() const {
  return this != internal_default_instance() && collection_ != nullptr;
}
inline bool CreateCollectionRequest::has_collection() const {
  return _internal_has_collection();
}
inline void CreateCollectionRequest::clear_collection() {
  if (GetArenaNoVirtual() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
}
inline const ::proto::collection::Collection& CreateCollectionRequest::_internal_collection() const {
  const ::proto::collection::Collection* p = collection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::collection::Collection*>(
      &::proto::collection::_Collection_default_instance_);
}
inline const ::proto::collection::Collection& CreateCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:proto.collection.CreateCollectionRequest.collection)
  return _internal_collection();
}
inline ::proto::collection::Collection* CreateCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:proto.collection.CreateCollectionRequest.collection)
  
  ::proto::collection::Collection* temp = collection_;
  collection_ = nullptr;
  return temp;
}
inline ::proto::collection::Collection* CreateCollectionRequest::_internal_mutable_collection() {
  
  if (collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::collection::Collection>(GetArenaNoVirtual());
    collection_ = p;
  }
  return collection_;
}
inline ::proto::collection::Collection* CreateCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:proto.collection.CreateCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline void CreateCollectionRequest::set_allocated_collection(::proto::collection::Collection* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collection_;
  }
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    
  } else {
    
  }
  collection_ = collection;
  // @@protoc_insertion_point(field_set_allocated:proto.collection.CreateCollectionRequest.collection)
}

// -------------------------------------------------------------------

// UpdateCollectionRequest

// .proto.collection.Collection collection = 1;
inline bool UpdateCollectionRequest::_internal_has_collection() const {
  return this != internal_default_instance() && collection_ != nullptr;
}
inline bool UpdateCollectionRequest::has_collection() const {
  return _internal_has_collection();
}
inline void UpdateCollectionRequest::clear_collection() {
  if (GetArenaNoVirtual() == nullptr && collection_ != nullptr) {
    delete collection_;
  }
  collection_ = nullptr;
}
inline const ::proto::collection::Collection& UpdateCollectionRequest::_internal_collection() const {
  const ::proto::collection::Collection* p = collection_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::collection::Collection*>(
      &::proto::collection::_Collection_default_instance_);
}
inline const ::proto::collection::Collection& UpdateCollectionRequest::collection() const {
  // @@protoc_insertion_point(field_get:proto.collection.UpdateCollectionRequest.collection)
  return _internal_collection();
}
inline ::proto::collection::Collection* UpdateCollectionRequest::release_collection() {
  // @@protoc_insertion_point(field_release:proto.collection.UpdateCollectionRequest.collection)
  
  ::proto::collection::Collection* temp = collection_;
  collection_ = nullptr;
  return temp;
}
inline ::proto::collection::Collection* UpdateCollectionRequest::_internal_mutable_collection() {
  
  if (collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::collection::Collection>(GetArenaNoVirtual());
    collection_ = p;
  }
  return collection_;
}
inline ::proto::collection::Collection* UpdateCollectionRequest::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:proto.collection.UpdateCollectionRequest.collection)
  return _internal_mutable_collection();
}
inline void UpdateCollectionRequest::set_allocated_collection(::proto::collection::Collection* collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collection_;
  }
  if (collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collection, submessage_arena);
    }
    
  } else {
    
  }
  collection_ = collection;
  // @@protoc_insertion_point(field_set_allocated:proto.collection.UpdateCollectionRequest.collection)
}

// .google.protobuf.FieldMask fieldMask = 2;
inline bool UpdateCollectionRequest::_internal_has_fieldmask() const {
  return this != internal_default_instance() && fieldmask_ != nullptr;
}
inline bool UpdateCollectionRequest::has_fieldmask() const {
  return _internal_has_fieldmask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCollectionRequest::_internal_fieldmask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = fieldmask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateCollectionRequest::fieldmask() const {
  // @@protoc_insertion_point(field_get:proto.collection.UpdateCollectionRequest.fieldMask)
  return _internal_fieldmask();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCollectionRequest::release_fieldmask() {
  // @@protoc_insertion_point(field_release:proto.collection.UpdateCollectionRequest.fieldMask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = fieldmask_;
  fieldmask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCollectionRequest::_internal_mutable_fieldmask() {
  
  if (fieldmask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaNoVirtual());
    fieldmask_ = p;
  }
  return fieldmask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateCollectionRequest::mutable_fieldmask() {
  // @@protoc_insertion_point(field_mutable:proto.collection.UpdateCollectionRequest.fieldMask)
  return _internal_mutable_fieldmask();
}
inline void UpdateCollectionRequest::set_allocated_fieldmask(PROTOBUF_NAMESPACE_ID::FieldMask* fieldmask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldmask_);
  }
  if (fieldmask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fieldmask)->GetArena();
    if (message_arena != submessage_arena) {
      fieldmask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fieldmask, submessage_arena);
    }
    
  } else {
    
  }
  fieldmask_ = fieldmask;
  // @@protoc_insertion_point(field_set_allocated:proto.collection.UpdateCollectionRequest.fieldMask)
}

// -------------------------------------------------------------------

// DeleteCollectionRequest

// int64 id = 1;
inline void DeleteCollectionRequest::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteCollectionRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DeleteCollectionRequest::id() const {
  // @@protoc_insertion_point(field_get:proto.collection.DeleteCollectionRequest.id)
  return _internal_id();
}
inline void DeleteCollectionRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void DeleteCollectionRequest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.collection.DeleteCollectionRequest.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace collection
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collection_2eproto
