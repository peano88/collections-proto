// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: collection.proto

#include "collection.pb.h"
#include "collection.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {
namespace collection {

static const char* CollectionService_method_names[] = {
  "/proto.collection.CollectionService/ListCollections",
  "/proto.collection.CollectionService/GetCollection",
  "/proto.collection.CollectionService/CreateCollection",
  "/proto.collection.CollectionService/UpdateCollection",
  "/proto.collection.CollectionService/DeleteCollection",
};

std::unique_ptr< CollectionService::Stub> CollectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CollectionService::Stub> stub(new CollectionService::Stub(channel));
  return stub;
}

CollectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListCollections_(CollectionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollection_(CollectionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCollection_(CollectionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCollection_(CollectionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCollection_(CollectionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CollectionService::Stub::ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::proto::collection::ListCollectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCollections_, context, request, response);
}

void CollectionService::Stub::experimental_async::ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollections_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCollections_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::ListCollections(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollections_, context, request, response, reactor);
}

void CollectionService::Stub::experimental_async::ListCollections(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::ListCollectionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCollections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>* CollectionService::Stub::AsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::ListCollectionsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollections_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::ListCollectionsResponse>* CollectionService::Stub::PrepareAsyncListCollectionsRaw(::grpc::ClientContext* context, const ::proto::collection::ListCollectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::ListCollectionsResponse>::Create(channel_.get(), cq, rpcmethod_ListCollections_, context, request, false);
}

::grpc::Status CollectionService::Stub::GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::proto::collection::Collection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollection_, context, request, response);
}

void CollectionService::Stub::experimental_async::GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::GetCollection(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollection_, context, request, response, reactor);
}

void CollectionService::Stub::experimental_async::GetCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::AsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_GetCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::PrepareAsyncGetCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::GetCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_GetCollection_, context, request, false);
}

::grpc::Status CollectionService::Stub::CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::proto::collection::Collection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCollection_, context, request, response);
}

void CollectionService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

void CollectionService::Stub::experimental_async::CreateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::AsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::PrepareAsyncCreateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::CreateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_CreateCollection_, context, request, false);
}

::grpc::Status CollectionService::Stub::UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::proto::collection::Collection* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCollection_, context, request, response);
}

void CollectionService::Stub::experimental_async::UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::UpdateCollection(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateCollection_, context, request, response, reactor);
}

void CollectionService::Stub::experimental_async::UpdateCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::collection::Collection* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::AsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_UpdateCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::collection::Collection>* CollectionService::Stub::PrepareAsyncUpdateCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::UpdateCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::collection::Collection>::Create(channel_.get(), cq, rpcmethod_UpdateCollection_, context, request, false);
}

::grpc::Status CollectionService::Stub::DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCollection_, context, request, response);
}

void CollectionService::Stub::experimental_async::DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, std::move(f));
}

void CollectionService::Stub::experimental_async::DeleteCollection(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, reactor);
}

void CollectionService::Stub::experimental_async::DeleteCollection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteCollection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CollectionService::Stub::AsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteCollection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CollectionService::Stub::PrepareAsyncDeleteCollectionRaw(::grpc::ClientContext* context, const ::proto::collection::DeleteCollectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteCollection_, context, request, false);
}

CollectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CollectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CollectionService::Service, ::proto::collection::ListCollectionsRequest, ::proto::collection::ListCollectionsResponse>(
          std::mem_fn(&CollectionService::Service::ListCollections), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CollectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CollectionService::Service, ::proto::collection::GetCollectionRequest, ::proto::collection::Collection>(
          std::mem_fn(&CollectionService::Service::GetCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CollectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CollectionService::Service, ::proto::collection::CreateCollectionRequest, ::proto::collection::Collection>(
          std::mem_fn(&CollectionService::Service::CreateCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CollectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CollectionService::Service, ::proto::collection::UpdateCollectionRequest, ::proto::collection::Collection>(
          std::mem_fn(&CollectionService::Service::UpdateCollection), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CollectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CollectionService::Service, ::proto::collection::DeleteCollectionRequest, ::google::protobuf::Empty>(
          std::mem_fn(&CollectionService::Service::DeleteCollection), this)));
}

CollectionService::Service::~Service() {
}

::grpc::Status CollectionService::Service::ListCollections(::grpc::ServerContext* context, const ::proto::collection::ListCollectionsRequest* request, ::proto::collection::ListCollectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CollectionService::Service::GetCollection(::grpc::ServerContext* context, const ::proto::collection::GetCollectionRequest* request, ::proto::collection::Collection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CollectionService::Service::CreateCollection(::grpc::ServerContext* context, const ::proto::collection::CreateCollectionRequest* request, ::proto::collection::Collection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CollectionService::Service::UpdateCollection(::grpc::ServerContext* context, const ::proto::collection::UpdateCollectionRequest* request, ::proto::collection::Collection* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CollectionService::Service::DeleteCollection(::grpc::ServerContext* context, const ::proto::collection::DeleteCollectionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace collection

