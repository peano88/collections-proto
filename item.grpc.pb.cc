// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: item.proto

#include "item.pb.h"
#include "item.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {
namespace item {

static const char* ItemService_method_names[] = {
  "/proto.item.ItemService/CreateItem",
  "/proto.item.ItemService/UpdateItem",
  "/proto.item.ItemService/DeleteItem",
};

std::unique_ptr< ItemService::Stub> ItemService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ItemService::Stub> stub(new ItemService::Stub(channel));
  return stub;
}

ItemService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateItem_(ItemService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateItem_(ItemService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteItem_(ItemService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ItemService::Stub::CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::proto::item::Item* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateItem_, context, request, response);
}

void ItemService::Stub::experimental_async::CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::CreateItem(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, reactor);
}

void ItemService::Stub::experimental_async::CreateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::item::Item>* ItemService::Stub::AsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::item::Item>::Create(channel_.get(), cq, rpcmethod_CreateItem_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::item::Item>* ItemService::Stub::PrepareAsyncCreateItemRaw(::grpc::ClientContext* context, const ::proto::item::CreateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::item::Item>::Create(channel_.get(), cq, rpcmethod_CreateItem_, context, request, false);
}

::grpc::Status ItemService::Stub::UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::proto::item::Item* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateItem_, context, request, response);
}

void ItemService::Stub::experimental_async::UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::UpdateItem(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, reactor);
}

void ItemService::Stub::experimental_async::UpdateItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::item::Item* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::proto::item::Item>* ItemService::Stub::AsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::item::Item>::Create(channel_.get(), cq, rpcmethod_UpdateItem_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::item::Item>* ItemService::Stub::PrepareAsyncUpdateItemRaw(::grpc::ClientContext* context, const ::proto::item::UpdateItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::proto::item::Item>::Create(channel_.get(), cq, rpcmethod_UpdateItem_, context, request, false);
}

::grpc::Status ItemService::Stub::DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteItem_, context, request, response);
}

void ItemService::Stub::experimental_async::DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, std::move(f));
}

void ItemService::Stub::experimental_async::DeleteItem(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, reactor);
}

void ItemService::Stub::experimental_async::DeleteItem(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ItemService::Stub::AsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteItem_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ItemService::Stub::PrepareAsyncDeleteItemRaw(::grpc::ClientContext* context, const ::proto::item::DeleteItemRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteItem_, context, request, false);
}

ItemService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemService::Service, ::proto::item::CreateItemRequest, ::proto::item::Item>(
          std::mem_fn(&ItemService::Service::CreateItem), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemService::Service, ::proto::item::UpdateItemRequest, ::proto::item::Item>(
          std::mem_fn(&ItemService::Service::UpdateItem), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemService::Service, ::proto::item::DeleteItemRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ItemService::Service::DeleteItem), this)));
}

ItemService::Service::~Service() {
}

::grpc::Status ItemService::Service::CreateItem(::grpc::ServerContext* context, const ::proto::item::CreateItemRequest* request, ::proto::item::Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemService::Service::UpdateItem(::grpc::ServerContext* context, const ::proto::item::UpdateItemRequest* request, ::proto::item::Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemService::Service::DeleteItem(::grpc::ServerContext* context, const ::proto::item::DeleteItemRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto
}  // namespace item

